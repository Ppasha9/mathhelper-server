package com.mathhelper.mathhelperserver.datatables_history.tasks

import com.mathhelper.mathhelperserver.datatables.namespaces.Namespace
import com.mathhelper.mathhelperserver.datatables.subject_type.SubjectType
import com.mathhelper.mathhelperserver.datatables.tasks.GoalType
import com.mathhelper.mathhelperserver.datatables.users.User
import com.mathhelper.mathhelperserver.datatables_history.HistoryId
import com.vladmihalcea.hibernate.type.json.JsonBinaryType
import org.hibernate.annotations.Type
import org.hibernate.annotations.TypeDef
import org.springframework.data.jpa.repository.JpaRepository
import java.time.OffsetDateTime
import javax.persistence.*
import javax.validation.constraints.NotEmpty

@Entity
@Table(name = "task_history")
@TypeDef(name = "jsonb", typeClass = JsonBinaryType::class)
data class TaskHistory(
    @EmbeddedId
    var id: HistoryId,

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "namespace_code")
    var namespace: Namespace,

    @Column(name="keywords", columnDefinition = "TEXT")
    @NotEmpty
    var keywords: String = "",

    @NotEmpty(message = "Please, provide task's name in English")
    @Column(name = "name_en")
    var nameEn: String,

    @NotEmpty(message = "Please, provide task's name in Russian")
    @Column(name = "name_ru")
    var nameRu: String,

    @Column(name = "description_short_en")
    var descriptionShortEn: String = "",

    @Column(name = "description_short_ru")
    var descriptionShortRu: String = "",

    @Column(name = "description_en", columnDefinition = "TEXT")
    var descriptionEn: String = "",

    @Column(name = "description_ru", columnDefinition = "TEXT")
    var descriptionRu: String = "",

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "subject_type")
    var subjectType: SubjectType? = null,

    @Column(name = "original_expression_plain_text", columnDefinition = "TEXT")
    var originalExpressionPlainText: String = "",

    @Column(name = "original_expression_tex", columnDefinition = "TEXT")
    var originalExpressionTex: String = "",

    @Column(name = "original_expression_structure_string", columnDefinition = "TEXT")
    var originalExpressionStructureString: String = "",

    @Column(name = "original_expression", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var originalExpression: MutableMap<String, *>? = null,

    @NotEmpty(message = "Please, provide task's goal type")
    @Column(name = "goal_type")
    var goalType: GoalType,

    @Column(name = "goal_expression_plain_text", columnDefinition = "TEXT")
    var goalExpressionPlainText: String? = null,

    @Column(name = "goal_expression_tex", columnDefinition = "TEXT")
    var goalExpressionTex: String? = null,

    @Column(name = "goal_expression_structure_string", columnDefinition = "TEXT")
    var goalExpressionStructureString: String? = null,

    @Column(name = "goal_expression", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var goalExpression: MutableMap<String, *>? = null,

    @Column(name = "goal_pattern", columnDefinition = "TEXT")
    var goalPattern: String? = null,

    @Column(name = "other_goal_data", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var otherGoalData: MutableMap<String, *>? = null,

    @Column(name = "steps_number")
    var stepsNumber: Int? = null,

    @Basic
    var time: Int? = null,

    @Basic
    var difficulty: Double = 0.0,

    @Column(name = "solution", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var solution: MutableMap<String, *>? = null,

    @Column(name = "solutions_steps_tree", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var solutionsStepsTree: MutableMap<String, *>? = null,

    @Column(columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var rules: ArrayList<*>? = null,

    @Column(name = "hints", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var hints: MutableMap<String, *>? = null,

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "author_user_code")
    var authorUser: User,

    @Column(name = "access_start_time")
    var accessStartTime: OffsetDateTime? = null,

    @Column(name = "access_end_time")
    var accessEndTime: OffsetDateTime? = null,

    @Column(name = "other_check_solution_data", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var otherCheckSolutionData: MutableMap<String, *>? = null,

    @Column(name = "count_of_auto_generated_tasks")
    var countOfAutoGeneratedTasks: Int? = 0,

    @Column(name = "other_auto_generation_data", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var otherAutoGenerationData: MutableMap<String, *>? = null,

    @Column(name = "interesting_facts", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var interestingFacts: MutableMap<String, *>? = null,

    @Column(name = "other_award_data", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var otherAwardData: MutableMap<String, *>? = null,

    @Column(name = "next_recommended_tasks", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var nextRecommendedTasks: MutableMap<String, *>? = null,

    @Column(name = "other_data", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var otherData: MutableMap<String, *>? = null,

    @Column(name = "is_active")
    var isActive: Boolean = true,

    @Column(name = "active_date_from")
    var activeDateFrom: OffsetDateTime? = null,

    @Column(name = "active_date_to")
    var activeDateTo: OffsetDateTime? = null
)


interface TaskHistoryRepository : JpaRepository<TaskHistory, HistoryId> {
    fun existsByIdCode(code: String): Boolean

    fun findByIdCode(code: String): List<TaskHistory>
    fun findByIdCodeAndIsActiveTrue(code: String): TaskHistory?
}