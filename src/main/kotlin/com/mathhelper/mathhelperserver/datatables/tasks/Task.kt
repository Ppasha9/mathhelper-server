package com.mathhelper.mathhelperserver.datatables.tasks

import com.mathhelper.mathhelperserver.constants.Constants
import com.mathhelper.mathhelperserver.datatables.namespaces.Namespace
import com.mathhelper.mathhelperserver.datatables.rule_pack.CodeWithNames
import com.mathhelper.mathhelperserver.datatables.subject_type.SubjectType
import com.mathhelper.mathhelperserver.datatables.users.User
import com.vladmihalcea.hibernate.type.json.JsonBinaryType
import org.hibernate.annotations.Type
import org.hibernate.annotations.TypeDef
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.data.jpa.repository.JpaRepository
import org.springframework.data.jpa.repository.Query
import org.springframework.data.repository.query.Param
import java.sql.Timestamp
import java.time.OffsetDateTime
import javax.persistence.*
import javax.validation.constraints.NotEmpty

@Entity
@Table(name = "task")
@TypeDef(name = "jsonb", typeClass = JsonBinaryType::class)
data class Task(
    @Id
    @NotEmpty(message = "Please provide task's code")
    @Column(unique = true, length = Constants.STRING_LENGTH_LONG)
    var code: String = "",

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "namespace_code")
    var namespace: Namespace,

    @Column(name="keywords", columnDefinition = "TEXT")
    @NotEmpty
    var keywords: String = "",

    @Column(name = "task_creation_type")
    var taskCreationType: String = "",

    @NotEmpty(message = "Please, provide task's name in English")
    @Column(name = "name_en")
    var nameEn: String,

    @NotEmpty(message = "Please, provide task's name in Russian")
    @Column(name = "name_ru")
    var nameRu: String,

    @Column(name = "description_short_en")
    var descriptionShortEn: String = "",

    @Column(name = "description_short_ru")
    var descriptionShortRu: String = "",

    @Column(name = "description_en", columnDefinition = "TEXT")
    var descriptionEn: String = "",

    @Column(name = "description_ru", columnDefinition = "TEXT")
    var descriptionRu: String = "",

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "subject_type")
    var subjectType: SubjectType? = null,

    @Column(name = "original_expression_plain_text", columnDefinition = "TEXT")
    var originalExpressionPlainText: String = "",

    @Column(name = "original_expression_tex", columnDefinition = "TEXT")
    var originalExpressionTex: String = "",

    @Column(name = "original_expression_structure_string", columnDefinition = "TEXT")
    var originalExpressionStructureString: String = "",

    @Column(name = "original_expression", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var originalExpression: MutableMap<String, *>? = null,

    @NotEmpty(message = "Please, provide task's goal type")
    @Column(name = "goal_type")
    var goalType: GoalType,

    @Column(name = "goal_expression_plain_text", columnDefinition = "TEXT")
    var goalExpressionPlainText: String? = null,

    @Column(name = "goal_expression_tex", columnDefinition = "TEXT")
    var goalExpressionTex: String? = null,

    @Column(name = "goal_expression_structure_string", columnDefinition = "TEXT")
    var goalExpressionStructureString: String? = null,

    @Column(name = "goal_expression", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var goalExpression: MutableMap<String, *>? = null,

    @Column(name = "goal_pattern", columnDefinition = "TEXT")
    var goalPattern: String? = null,

    @Column(name = "other_goal_data", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var otherGoalData: MutableMap<String, *>? = null,

    @Column(name = "steps_number")
    var stepsNumber: Int? = null,

    var time: Int? = null,

    var difficulty: Double,

    @Column(name = "solution", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var solution: MutableMap<String, *>? = null,

    @Column(name = "solutions_steps_tree", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var solutionsStepsTree: MutableMap<String, *>? = null,

    @Column(columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var rules: ArrayList<*>? = null,

    @Column(name = "hints", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var hints: MutableMap<String, *>? = null,

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "author_user_code")
    var authorUser: User,

    @Column(name = "access_start_time")
    var accessStartTime: OffsetDateTime? = null,

    @Column(name = "access_end_time")
    var accessEndTime: OffsetDateTime? = null,

    @Column(name = "other_check_solution_data", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var otherCheckSolutionData: MutableMap<String, *>? = null,

    @Column(name = "count_of_auto_generated_tasks")
    var countOfAutoGeneratedTasks: Int? = 0,

    @Column(name = "other_auto_generation_data", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var otherAutoGenerationData: MutableMap<String, *>? = null,

    @Column(name = "interesting_facts", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var interestingFacts: MutableMap<String, *>? = null,

    @Column(name = "other_award_data", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var otherAwardData: MutableMap<String, *>? = null,

    @Column(name = "next_recommended_tasks", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var nextRecommendedTasks: MutableMap<String, *>? = null,

    @Column(name = "other_data", columnDefinition = "jsonb")
    @Type(type = "jsonb")
    var otherData: MutableMap<String, *>? = null,

    @Column(name = "server_action_ts")
    var serverActionTs: Timestamp
)


interface TaskRepository: JpaRepository<Task, String>, CustomTaskRepository {
    fun existsByCode(code: String): Boolean
    fun existsByAuthorUserCode(authorUserCode: String): Boolean
    fun existsByNamespaceCode(namespaceCode: String): Boolean

    fun findByCode(code: String): Task?
    fun findByAuthorUserCode(authorUserCode: String): List<Task>?
    fun findByNamespaceCode(namespaceCode: String): List<Task>?

    @Query("""
        select code, name_en as nameEn, name_ru as nameRu
        from ${Constants.POSTGRES_SCHEME}.task
        where namespace_code = :code
    """, nativeQuery = true)
    fun findNamesOnlyByNamespaceCodeNative(@Param("code") code: String): List<CodeWithNames>

    @Query(value = """
        select word from ${Constants.POSTGRES_SCHEME}.task_word
        where word % :keyword order by similarity(word, :keyword) desc, word limit 1
    """, nativeQuery = true)
    fun findKeywordNative(@Param("keyword") keyword: String): String?

    @Query(value = """
        select * from ${Constants.POSTGRES_SCHEME}.find_tasks_by_keywords(:keywords, :namespace, :authorUserCode, :subjectType, :rows_limit, :offset)
    """, nativeQuery = true)
    fun findByKeywordsAndRowsLimitAndOffsetAndNamespaceAndAuthorUserCodeAndSubjectTypeNative(
        @Param("keywords") keywords: String,
        @Param("rows_limit") rowsLimit: Int,
        @Param("offset") offset: Int,
        @Param("namespace") namespace: String,
        @Param("authorUserCode") authorUserCode: String,
        @Param("subjectType") subjectType: String
    ) : List<String>

    fun findByCodeIn(codes: List<String>): List<Task>
}

interface CustomTaskRepository {
    fun findByLimitAndOffsetAndSubstrAndSortByAndDescendingAndNamespaceAndAuthorUserCodeAndSubjectTypeNative(
        limit: String,
        offset: Int,
        substring: String,
        sortBy: String,
        sortByType: String,
        namespace: String,
        authorUserCode: String,
        subjectType: SubjectType?
    ): List<Task>
}

class CustomTaskRepositoryImpl: CustomTaskRepository {
    @Autowired
    private lateinit var entityManager: EntityManager

    override fun findByLimitAndOffsetAndSubstrAndSortByAndDescendingAndNamespaceAndAuthorUserCodeAndSubjectTypeNative(
        limit: String,
        offset: Int,
        substring: String,
        sortBy: String,
        sortByType: String,
        namespace: String,
        authorUserCode: String,
        subjectType: SubjectType?
    ): List<Task> {
        val query = """
                select *
                from ${Constants.POSTGRES_SCHEME}.task
                where
                    ('$substring' = '' or name_en like '%$substring%' or name_ru like '%$substring%') and
                    ('$namespace' = '' or namespace_code = '$namespace') and
                    ('$authorUserCode' = '' or author_user_code = '$authorUserCode') and
                    ('${subjectType?.name ?: ""}' = '' or subject_type = '${subjectType?.name ?: ""}')
                order by
                    $sortBy $sortByType
                limit $limit offset $offset  
            """

        return entityManager.createNativeQuery(query, Task::class.java).resultList as List<Task>
    }
}